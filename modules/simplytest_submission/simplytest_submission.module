<?php

/**
 * @file
 * Simplytest.me submission management.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Entity\EntityInterface;
use Drupal\simplytest_submission\Entity\Submission;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\FieldableEntityInterface;

const SIMPLYTEST_SUBMISSION_SERVICE_URL = 'https://spawn.sh';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo prefill fields as before from URL
 *       simplytest.me/project/$project/$version?patch[]=$patch&add[]=$project
 * @todo support commit hashs as $versions from URL
 */
function simplytest_submission_form_node_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'simplytest_submission/submission';
  $form['actions']['submit']['#value'] = 'Launch Sandbox';
  // Disable some stuff for now.
  $form['field_drupal_projects']['widget']['add_more']['#disabled'] = TRUE; // @todo support multiple projects
  for ($delta = 0; $delta <= $form['field_drupal_projects']['widget']['#max_delta']; $delta++) {
    $widget = &$form['field_drupal_projects']['widget'][(string) $delta];
    // @todo setup project database with elasticsearch that has drupal.org and backdrop modules indexed
    $widget['field_project_identifier']['widget']['#disabled'] = TRUE; // @todo needs autocomplete
    if ($_GET['project'] === 'social') {
      $widget['field_project_identifier']['widget']['0']['value']['#default_value'] = 'social';
      $widget['field_project_install']['widget']['value']['#default_value'] = FALSE;
      $widget['field_project_install']['widget']['#disabled'] = TRUE;
    }
    $widget['field_project_source']['widget']['#disabled'] = TRUE; // @todo support more sources than d.o
    $widget['field_project_version']['widget']['#disabled'] = TRUE; // @todo fetch versions
    $widget['field_project_patches']['widget']['#disabled'] = TRUE; // @todo apply patches
  }
  //kint($form['field_drupal_projects']['widget']);
  $form['field_webspace_webserver']['#disabled'] = TRUE; // @todo write alternative webserver scripts
  $form['field_webspace_interpreter']['#disabled'] = TRUE; // @todo write alternative interpreter scripts
  $form['field_webspace_secondary_dbs']['#disabled'] = TRUE; // @todo implement secondary db scripts

  // Redirect to progress page.
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'simplytest_submission_submit_goto_progress';
    }
  }
}

/**
 * Form submit callback.
 *
 * Redirects to submission progress page after submission node creation.
 */
function simplytest_submission_submit_goto_progress($form, FormStateInterface $form_state) {
  // Remove node creation status message.
  drupal_get_messages('status');
  // Redirect.
  $form_state->setRedirect('entity.node.simplytest_submission_progress', [
    'node' => $form_state->getFormObject()->getEntity()->id(),
  ]);
}

/**
* Implements hook_ENTITY_TYPE_presave().
*
* @todo use own entity type instead of nodes (?)
* @todo http request for spawning container can take some time, would be better
*       to do that on the progress page.
*/
function simplytest_submission_node_presave(EntityInterface $entity) {
  //kint($entity->field_drupal_projects->value);
  //throw new Error();

  if ($entity->getType() !== 'submission') { // @todo simplytest_ prefix
    return;
  }

  // Request preparation.
  $url = SIMPLYTEST_SUBMISSION_SERVICE_URL;
  $url .= '/?' . http_build_query(array(
    // use $ drush sset simplytest_submission.service_token TOKEN
    // @todo provide config interface for this / or do it within rules UI
    'token' => \Drupal::state()->get('simplytest_submission.service_token'),
    'ttl' => $entity->field_instance_runtime->value,
    'image' => $entity->field_instance_image->value,
    'cache' => ($entity->field_instance_snapshot_cache->value) ? 'true' : 'false'
  ));

  // Build script.
  $script = simplytest_submission_build_script($entity);

  // Send request.
  $client = \Drupal::httpClient();
  $response = $client->request('POST', $url, [
    'headers' => array(
      'Accept' => 'application/json',
      'Content-Type' => 'application/octet-stream; charset=utf-8',
    ),
    'body' => $script,
  ]);

  // Check response.
  if ($response->getStatusCode() !== 201) {
    throw new Error('Invalid status code returned from spawn.sh api');
  }
  $data = json_decode($response->getBody(), true);
  if (!isset($data['id'])) {
    throw new Error('No id in spawn.sh response data');
  }

  // Save container ID as title.
  $entity->title->value = $data['id'];
  $entity->field_container_url->value = $data['url'];
  $entity->field_container_token->value = $data['token'];
}

/**
 * Generates the script to build the submission with.
 *
 * Scripting is standard bash script with snapshot caching from spawn.sh.
 *
 * @todo dynamic config file generator routes? eg. /node/:id/nginx
 * @todo move script building into rules (?)
 * @todo add timer/count down until disposal
 */
function simplytest_submission_build_script(EntityInterface $entity) {
  $script = [];
  $script[] = '#!/bin/bash';
  $script[] = 'export DEBIAN_FRONTEND=noninteractive';
  $script[] = 'set -x';
  $script[] = 'apt-get update';
  $script[] = 'apt-get upgrade -y';
  // For some reason service startup is a lot faster without cloud-init.
  $script[] = 'sudo apt-get remove -y --auto-remove cloud-init';

  $packages = [];
  $packages_script = [];

  // General purpose packages.
  $packages[] = 'zip';

  // PHP.
  switch ($entity->field_webspace_interpreter->value) {
    case 'php7-fpm':
      $packages[] = 'php7.0-fpm';
      break;
    case 'mod-php7':
      // Installed in the apache2 part.
      break;
    case 'php7-cgi':
      $packages[] = 'php7.0-cgi';
      break;
  }
  // General PHP modules that are required by drupal, drush or composer.
  $packages[] = 'php7.0-xml';
  $packages[] = 'php7.0-curl';
  $packages[] = 'php7.0-gd';
  $packages[] = 'php7.0-json';
  $packages[] = 'php7.0-mbstring';

  // DB.
  switch ($entity->field_webspace_database->value) {
    case 'mariadb':
      $packages[] = 'mariadb-server';
      $packages[] = 'php7.0-mysql';
      // Prepare db mysql://drupal:drupal@localhost/drupal.
      $packages_script[] = 'mysql -u root -e "
        CREATE USER \'drupal\'@\'localhost\' IDENTIFIED BY \'drupal\';
        GRANT USAGE ON *.* TO \'drupal\'@\'localhost\' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
        CREATE DATABASE IF NOT EXISTS \`drupal\`;
        GRANT ALL PRIVILEGES ON \`drupal\`.* TO \'drupal\'@\'localhost\'"';
      // Gracefully shut down database before snapshotting.
      $packages_script[] = 'service mysql stop';
      // Skip mysql recovery for faster startup.
      $packages_script[] = 'truncate -s 0 /etc/mysql/debian-start';
      break;
    case 'mysql':
      $packages[] = 'mysql-server';
      $packages[] = 'php7.0-mysql';
      // Prepare db mysql://drupal:drupal@localhost/drupal.
      $packages_script[] = 'mysql -u root -e "
        CREATE USER \'drupal\'@\'localhost\' IDENTIFIED BY \'drupal\';
        GRANT USAGE ON *.* TO \'drupal\'@\'localhost\' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
        CREATE DATABASE IF NOT EXISTS \`drupal\`;
        GRANT ALL PRIVILEGES ON \`drupal\`.* TO \'drupal\'@\'localhost\'"';
      // Gracefully shut down database before snapshotting.
      $packages_script[] = 'service mysql stop';
      break;
    case 'sqllite':
      $packages[] = 'php7.0-sqlite3';
      break;
    case 'postgresql':
      $packages[] = 'postgresql';
      $packages[] = 'php7.0-pgsql';
      // Prepare db pgsql://drupal:drupal@localhost/drupal.
      $packages_script[] = 'sudo -u postgres createuser --no-replication drupal';
      $packages_script[] = 'sudo -u postgres createdb --owner=drupal drupal';
      $packages_script[] = 'sudo -u postgres psql -c "ALTER USER drupal WITH PASSWORD \'drupal\';"';
      // Gracefully shut down database before snapshotting.
      $packages_script[] = 'service postgresql stop';
      break;
  }

  // Webserver.
  switch ($entity->field_webspace_webserver->value) {
    case 'nginx':
      $packages[] = "nginx";
      switch ($entity->field_webspace_interpreter->value) {
        case 'php7-fpm':
          $packages_script[] = 'echo "
            server {
              listen 80;
              server_name *.ply.st;
              root /var/www/html;
              index index.php;
              location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.0-fpm.sock;
              }
            }" > /etc/nginx/sites-enabled/default';
          break;
        case 'mod-php7':
          throw new Error('Cannot use mod-php7 with nginx');
          break;
        case 'php7-cgi':
          // @todo
          $packages_script[] = 'echo "
            server {
              listen 80;
              server_name *.ply.st;
              root /var/www/html;
              index index.php;
              location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass 127.0.0.1:9000;
              }
            }" > /etc/nginx/sites-enabled/default';
          break;
      }
      $packages_script[] = 'service nginx reload';
      break;
    case 'apache2':
      $packages[] = "apache2";
      // Modules and config for clean url.
      $packages_script[] = 'a2enmod rewrite';
      $packages_script[] = 'echo "
        <Directory /var/www/html>
          Options FollowSymLinks
          AllowOverride All
        </Directory>" >> /etc/apache2/sites-enabled/000-default.conf';
      $packages_script[] = 'service apache2 restart';

      switch ($entity->field_webspace_interpreter->value) {
        case 'php7-fpm':
          // @todo
          break;
        case 'mod-php7':
          $packages[] = 'libapache2-mod-php7.0';
          break;
        case 'php7-cgi':
          // @todo
          break;
      }
      $packages_script[] = 'rm /var/www/html/index.html';
      break;
  }

  $script[] = 'apt-get install -y ' . implode(' ', $packages);
  $script = array_merge($script, $packages_script);

  // Install composer.
  $script[] = 'php -r "copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');"';
  $script[] = 'php composer-setup.php --quiet --install-dir=/usr/local/bin --filename=composer';
  $script[] = 'rm composer-setup.php';

  // Install drush.
  $script[] = 'php -r "readfile(\'https://s3.amazonaws.com/files.drush.org/drush.phar\');" > drush';
  $script[] = 'chmod +x drush';
  $script[] = 'mv drush /usr/local/bin';

  // Snapshot; Start fetching drupal projects.
  // @todo need snapshot cache invalidation to keep packages up to date
  $script[] = '#!/bin/bash';
  $script[] = 'export DEBIAN_FRONTEND=noninteractive';
  $script[] = 'set -x';
  // @todo actually download more than drupal core
  // @todo do this with non root user
  if ($entity->field_drupal_projects[0]->getFieldCollectionItem()->field_project_identifier->value === 'social') {
    $script[] = 'composer create-project goalgorilla/social_template:dev-master /var/www/drupal --no-interaction';
    $script[] = 'ln -s /var/www/drupal/html /var/www/drupal/web';
    $script[] = 'mkdir /var/www/drupal/html/sites/default/files';
    $script[] = 'chmod 777 /var/www/drupal/html/sites/default/files';
    $script[] = 'cp /var/www/drupal/html/sites/default/default.settings.php /var/www/drupal/html/sites/default/settings.php';
    $script[] = 'chmod 777 /var/www/drupal/html/sites/default/settings.php';
    $script[] = 'echo "
      \$settings[\'hash_salt\'] = \'notasecret\';
      \$databases[\'default\'][\'default\'] = array (
        \'database\' => \'drupal\',
        \'username\' => \'drupal\',
        \'password\' => \'drupal\',
        \'prefix\' => \'\',
        \'host\' => \'localhost\',
        \'port\' => \'\',
        \'namespace\' => \'Drupal\\Core\\Database\\Driver\\mysql\',
        \'driver\' => \'mysql\',
      );" >> /var/www/drupal/html/sites/default/settings.php';
  }
  else {
    $script[] = 'composer create-project drupal-composer/drupal-project:8.x-dev /var/www/drupal --stability dev --no-interaction';
  }
  $script[] = 'rm -rf /var/www/html';
  $script[] = 'ln -s /var/www/drupal/web /var/www/html';

  // Snapshot; Start installing drupal projects.
  // @todo if project is dev version we shouldn't snapshot cache (for too long).
  $script[] = '#!/bin/bash';
  $script[] = 'export DEBIAN_FRONTEND=noninteractive';
  $script[] = 'set -x';

  // Start up database.
  switch ($entity->field_webspace_database->value) {
    case 'mariadb':
    case 'mysql':
      $script[] = 'service mysql start';
      break;
    case 'postgresql':
      $script[] = 'service postgresql start';
      break;
  }

  // Use webroot as cwd.
  $script[] = 'cd /var/www/drupal/web';
  // Whether we install depends of the form selection.
  // @todo if skipping drupal core installation, prefill database credentials and etc
  //       can we use $settings in settings.php for that?
  // @todo install with dynamic site name? one of the project names?
  // @todo run drush with non root user
  if ($entity->field_drupal_projects[0]->getFieldCollectionItem()->field_project_install->value) {
    switch ($entity->field_webspace_database->value) {
      case 'mariadb':
      case 'mysql':
        $script[] = 'drush si -y --db-url=mysql://drupal:drupal@localhost/drupal --account-pass=admin --site-name=drupal';
        // Gracefully shut down database before snapshotting.
        $script[] = 'service mysql stop';
        break;
      case 'postgresql':
        $script[] = 'drush si -y --db-url=pgsql://drupal:drupal@localhost/drupal --account-pass=admin --site-name=drupal';
        // Gracefully shut down database before snapshotting.
        $script[] = 'service postgresql stop';
        break;
      case 'sqllite':
        $script[] = 'drush si -y --db-url=sqlite://sites/default/files/.ht.sqlite --account-pass=admin --site-name=drupal';
        $script[] = 'chmod 666 sites/default/files/.ht.sqlite';
        break;
    }
    $script[] = '#!/bin/bash';
    // Snapshot; Snapshot installed state.
    $script[] = 'export DEBIAN_FRONTEND=noninteractive';
    $script[] = 'set -x';
    // Start up database.
    switch ($entity->field_webspace_database->value) {
      case 'mariadb':
      case 'mysql':
        $script[] = 'service mysql start';
        break;
      case 'postgresql':
        $script[] = 'service postgresql start';
        break;
    }
  }

  return implode("\n", $script);
}

/**
 * Allowed value callback for submission statuses.
 *
 * @return array
 */
function simplytest_submission_status_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  return Submission::getStatusOptions();
}
